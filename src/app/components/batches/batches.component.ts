import { AfterViewInit, Component, OnInit, ViewChild, ViewEncapsulation, DoCheck } from '@angular/core';
import { MatSort, MatTableDataSource, MatCheckbox, MatSelect } from '@angular/material';
import { ReactiveFormsModule, FormGroup, FormBuilder, Validators, NgForm } from '@angular/forms';
import { FormControl } from '@angular/forms';

import { Batch } from '../../model/Batch';
import { Curriculum } from '../../model/Curriculum';
import { Address } from '../../model/Address';

import { BatchControllerService } from '../../services/api/batch-controller/batch-controller.service';
import { CurriculumControllerService } from '../../services/api/curriculum-controller/curriculum-controller.service';
import { TrainerControllerService } from '../../services/api/trainer-controller/trainer-controller.service';
import { AddressControllerService } from '../../services/api/address-controller/address-controller.service';
import { Skill } from '../../model/Skill';
import { Focus } from '../../model/Focus';
import { Trainer } from '../../model/Trainer';
import { Building } from '../../model/Building';
import { Room } from '../../model/Room';
import { BuildingControllerService } from '../../services/api/building-controller/building-controller.service';

@Component({
  selector: 'app-batches',
  templateUrl: './batches.component.html',
  styleUrls: ['./batches.component.css'],
  encapsulation: ViewEncapsulation.None
})
export class BatchesComponent implements OnInit, AfterViewInit, DoCheck {
  //--------------------------------------------------VALUES FOR CREATE BATCHES-------------------------------------
  //Objects for storing batch form data
  batchForm: FormGroup;
  newBatch: Batch;
  skillsList: Skill[] = [];
  focuses: Focus[] = [];
  trainers: Trainer[] = [];
  buildings: Building[] = [];
  rooms: Room[] = [];
  selectedLocation = null;
  selectedBuilding = null;
  selectedCurriculum = null;
  selectedFocus = null;

  //For form select in Create New Batch
  curriculums: Curriculum[] = [];
  locations: Address[] = [];
  buildingsOfALocation: Building[] = [];

  // Autogenerated Batch Form Data
  numOfWeeksBetween = 0;
  genBatchName = '';
  genEndDate;

  currentDate = new Date(Date.now());
  isLoading: boolean;
  firstHeader = 'Loading...';
  // ------------------------------------------------ VARIABLES FOR ALL BATCHES -----------------------------------
  //  COLUMNS FOR THE ALL BATCHES TAB
  batchColumns = [
    'Checkbox',
    'Name',
    'Curriculum',
    'Focus',
    'Trainer/Co-Trainer',
    'Location',
    'Building',
    'Room',
    'StartDate',
    'EndDate',
    'Icons'
  ];

  allBatches: Batch[];
  dataSource = new MatTableDataSource(this.allBatches);
  secondHeader = 'Loading...';

  constructor(
    private fb: FormBuilder,
    private curriculumService: CurriculumControllerService,
    private addressService: AddressControllerService,
    private trainerService: TrainerControllerService,
    private batchService: BatchControllerService,
    private buildingService: BuildingControllerService
  ) {}

  @ViewChild(MatSort) sort: MatSort;

  ngOnInit() {
    this.isLoading = true;
    // ------------- Populating Data from Services -----------------
    this.curriculumService
      .findAll()
      .toPromise()
      .then(response => {
        this.curriculums = response;
        this.firstHeader = 'Create New Batch';
        this.isLoading = false;
      })
      .catch(error => {
        this.isLoading = false;
        this.firstHeader = 'Create Batch Form Disabled - Content Not Loaded';
        console.log(error);
      });
    this.addressService
      .findAll()
      .toPromise()
      .then(response => {
        this.locations = response;
        this.isLoading = false;
      })
      .catch(error => {
        this.isLoading = false;
        console.log(error);
      });
    this.trainerService
      .findAll()
      .toPromise()
      .then(response => {
        this.trainers = response;
        this.isLoading = false;
      })
      .catch(error => {
        this.isLoading = false;
        console.log(error);
      });
    this.batchService
      .findAll()
      .toPromise()
      .then(response => {
        this.allBatches = response;
        this.secondHeader = 'All Batches';
        this.isLoading = false;
        this.dataSource.data = this.allBatches;
      })
      .catch(error => {
        this.isLoading = false;
        this.secondHeader = 'Could Not Load Batches';
        console.log(error);
      });
    this.buildingService
      .findAll()
      .toPromise()
      .then(response => {
        this.buildings = response;
        this.isLoading = false;
      })
      .catch(error => {
        this.isLoading = false;
        console.log(error);
      });

    // ------------ Batch Form Validation --------------
    this.batchForm = this.fb.group({
      curriculum: [null, Validators.required],
      focus: [null],
      skills: [[], Validators.required],
      startDate: [null, Validators.required],
      endDate: [null, Validators.required],
      batchName: [null],
      trainer: [null, Validators.required],
      cotrainer: [null],
      location: [null, Validators.required],
      building: [null],
      room: [null]
    });

    // ----- Observable for form changes in Create Batches panel ------
    this.batchForm.valueChanges.subscribe(data => {
      const startDate = data.startDate;
      const endDate = data.endDate;
      const curriculum = data.curriculum;
      const focus = data.focus;
      this.genBatchName = this.createBatchName(curriculum, focus, startDate);

      if (startDate) {
        this.genEndDate = this.computeDefaultEndDate(startDate);
        this.numOfWeeksBetween = this.computeNumOfWeeksBetween(startDate, endDate);
      }
    });
  }

  ngDoCheck() {
    // ------- Checking if a form field has a selected value on Create Batch form -------
    // ------- Populating Subsequent fields based on selection ---------

    // Checking if Location has been selected, if so, populate buildings
    if (this.batchForm.value.location) {
      const locationName = this.batchForm.value.location.name;
      if (locationName && locationName !== this.selectedLocation) {
        this.selectedLocation = locationName;

        this.buildings.forEach(building => {
          if (building.address && building.address.name === this.selectedLocation) {
            this.buildingsOfALocation.push(building);
          }
        });
      }
    }

    // Checking if Building has been selected, if so, populate rooms
    if (this.batchForm.value.building) {
      const buildingName = this.batchForm.value.building.name;
      if (buildingName && buildingName !== this.selectedBuilding) {
        this.selectedBuilding = buildingName;
        this.rooms = this.batchForm.value.building.rooms;
      }
    }

    // Checking if Curriculum has been selected, if so, populate focuses and skills
    if (this.batchForm.value.curriculum) {
      const curriculumName = this.batchForm.value.curriculum.name;
      if (curriculumName && curriculumName !== this.selectedCurriculum) {
        this.selectedCurriculum = curriculumName;
        this.focuses = this.batchForm.value.curriculum.focuses;
        this.skillsList = this.batchForm.value.curriculum.skills;
      }
    }

    // Checking if Focus has been selected, if so, append focus skills to core skills
    if (this.batchForm.value.focus) {
      const focusName = this.batchForm.value.focus.name;
      if (focusName && focusName !== this.selectedFocus) {
        this.selectedFocus = focusName;

        this.batchForm.value.focus.skills.forEach(skill => {
          let canAdd = true;
          this.skillsList.forEach(s => {
            if (s.name === skill.name) {
              canAdd = false;
            }
          });
          if (canAdd) {
            this.skillsList.push(skill);
          }
        });
      }
    }
  }

  ngAfterViewInit() {
    this.dataSource.sort = this.sort;
  }

  // ------ Create a new batch using provided valid form data ------
  onSubmit() {
    this.newBatch = new Batch(
      0,
      this.batchForm.value.batchName,
      this.batchForm.value.startDate,
      this.batchForm.value.endDate,
      this.batchForm.value.curriculum,
      this.batchForm.value.focus,
      this.batchForm.value.trainer,
      this.batchForm.value.cotrainer,
      this.batchForm.value.skills,
      '',
      this.batchForm.value.location,
      this.batchForm.value.building,
      this.batchForm.value.room
    );
    console.log(this.newBatch);
    this.batchService
      .create(this.newBatch)
      .toPromise()
      .then(b => {
        // tslint:disable-next-line:no-unused-expression
        location.reload();
      })
      .catch(error => {
        console.log(error);
      });
  }

  // --------------------------------- Methods for auto generating form values -------------------------------------
  //Calculate number of weeks between two dates
  computeNumOfWeeksBetween(startDate: number, endDate: number): number {
    const startValue = new Date(startDate).valueOf();
    const endValue = new Date(endDate).valueOf();
    if (startValue && endValue) {
      const numberOfDays = Math.abs(<any>startValue - <any>endValue) / (1000 * 60 * 60 * 24);
      const numberOfWeeks = Math.floor(numberOfDays / 7);
      return numberOfWeeks;
    }
    return 0;
  }

  //Calculate the Date of Ten weeks later from start date
  computeDefaultEndDate(startDate: number): number {
    const dateValue = new Date(startDate);
    if (dateValue) {
      const tenWeeks = 1000 * 60 * 60 * 24 * 7 * 10 + 1000 * 60 * 60 * 24;
      return dateValue.valueOf() + tenWeeks;
    }
  }

  //Generate Batch Name based on curriculum and/or focus and start date
  createBatchName(curriculum: Curriculum, focus: Focus, startDate: number): string {
    if (curriculum && startDate) {
      const date = new Date(startDate);
      const year = date
        .getFullYear()
        .toString()
        .substr(-2);
      let day = date.getDate().toString();
      let month = (date.getMonth() + 1).toString();
      const monthName = date.toLocaleString('en-us', { month: 'short' });

      if (date.getDate() < 10) {
        day = '0' + day;
      }
      if (date.getMonth() < 10) {
        month = '0' + month;
      }
      if (focus) {
        return year + '' + month + ' ' + monthName + '' + day + ' ' + curriculum.name + ' ' + focus.name;
      }
      return year + '' + month + ' ' + monthName + '' + day + ' ' + curriculum.name;
    }
    return '';
  }
  // -------------------------------------------- End auto generate methods -----------------------------------------

  // --------------------------------------- Begin Methods for All Batches Panel ------------------------------------
  editBatch() {
    //TODO
  }

  cloneBatch() {
    //TODO
  }

  deleteBatch() {
    //TODO
  }
  // ---------------------------------------- End Methods for All Batches Panel -------------------------------------
}
